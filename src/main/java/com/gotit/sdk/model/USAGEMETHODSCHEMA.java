/*
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gotit.sdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.gotit.sdk.JSON;

/**
 * USAGEMETHODSCHEMA
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-05T09:04:05.866297444Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class USAGEMETHODSCHEMA {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  @javax.annotation.Nullable
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  @javax.annotation.Nullable
  private Integer order;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  @javax.annotation.Nullable
  private String link;

  public static final String SERIALIZED_NAME_PHONE1 = "phone_1";
  @SerializedName(SERIALIZED_NAME_PHONE1)
  @javax.annotation.Nullable
  private String phone1;

  public static final String SERIALIZED_NAME_PHONE2 = "phone_2";
  @SerializedName(SERIALIZED_NAME_PHONE2)
  @javax.annotation.Nullable
  private String phone2;

  public USAGEMETHODSCHEMA() {
  }

  public USAGEMETHODSCHEMA type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of method used &#39;AT_STORE&#39;: at the store &#39;HOTLINE&#39;: via hot line number &#39;WEBSITE&#39;: via website &#39;FORM&#39;: via order form &#39;BUY_IN_WEBVIEW&#39;: via web &#39;BUY_IN_APP&#39;: via App
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public USAGEMETHODSCHEMA title(@javax.annotation.Nullable String title) {
    this.title = title;
    return this;
  }

  /**
   * Method title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(@javax.annotation.Nullable String title) {
    this.title = title;
  }


  public USAGEMETHODSCHEMA description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the method
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public USAGEMETHODSCHEMA order(@javax.annotation.Nullable Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Number
   * @return order
   */
  @javax.annotation.Nullable
  public Integer getOrder() {
    return order;
  }

  public void setOrder(@javax.annotation.Nullable Integer order) {
    this.order = order;
  }


  public USAGEMETHODSCHEMA link(@javax.annotation.Nullable String link) {
    this.link = link;
    return this;
  }

  /**
   * Link to the usage method
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(@javax.annotation.Nullable String link) {
    this.link = link;
  }


  public USAGEMETHODSCHEMA phone1(@javax.annotation.Nullable String phone1) {
    this.phone1 = phone1;
    return this;
  }

  /**
   * Phone number 1
   * @return phone1
   */
  @javax.annotation.Nullable
  public String getPhone1() {
    return phone1;
  }

  public void setPhone1(@javax.annotation.Nullable String phone1) {
    this.phone1 = phone1;
  }


  public USAGEMETHODSCHEMA phone2(@javax.annotation.Nullable String phone2) {
    this.phone2 = phone2;
    return this;
  }

  /**
   * Phone number 2
   * @return phone2
   */
  @javax.annotation.Nullable
  public String getPhone2() {
    return phone2;
  }

  public void setPhone2(@javax.annotation.Nullable String phone2) {
    this.phone2 = phone2;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    USAGEMETHODSCHEMA USAGE_METHOD_SCHEMA = (USAGEMETHODSCHEMA) o;
    return Objects.equals(this.type, USAGE_METHOD_SCHEMA.type) &&
        Objects.equals(this.title, USAGE_METHOD_SCHEMA.title) &&
        Objects.equals(this.description, USAGE_METHOD_SCHEMA.description) &&
        Objects.equals(this.order, USAGE_METHOD_SCHEMA.order) &&
        Objects.equals(this.link, USAGE_METHOD_SCHEMA.link) &&
        Objects.equals(this.phone1, USAGE_METHOD_SCHEMA.phone1) &&
        Objects.equals(this.phone2, USAGE_METHOD_SCHEMA.phone2);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, title, description, order, link, phone1, phone2);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class USAGEMETHODSCHEMA {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    phone1: ").append(toIndentedString(phone1)).append("\n");
    sb.append("    phone2: ").append(toIndentedString(phone2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("order");
    openapiFields.add("link");
    openapiFields.add("phone_1");
    openapiFields.add("phone_2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to USAGEMETHODSCHEMA
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!USAGEMETHODSCHEMA.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in USAGEMETHODSCHEMA is not found in the empty JSON string", USAGEMETHODSCHEMA.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!USAGEMETHODSCHEMA.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `USAGEMETHODSCHEMA` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("phone_1") != null && !jsonObj.get("phone_1").isJsonNull()) && !jsonObj.get("phone_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone_1").toString()));
      }
      if ((jsonObj.get("phone_2") != null && !jsonObj.get("phone_2").isJsonNull()) && !jsonObj.get("phone_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone_2").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!USAGEMETHODSCHEMA.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'USAGEMETHODSCHEMA' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<USAGEMETHODSCHEMA> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(USAGEMETHODSCHEMA.class));

       return (TypeAdapter<T>) new TypeAdapter<USAGEMETHODSCHEMA>() {
           @Override
           public void write(JsonWriter out, USAGEMETHODSCHEMA value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public USAGEMETHODSCHEMA read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of USAGEMETHODSCHEMA given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of USAGEMETHODSCHEMA
   * @throws IOException if the JSON string is invalid with respect to USAGEMETHODSCHEMA
   */
  public static USAGEMETHODSCHEMA fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, USAGEMETHODSCHEMA.class);
  }

  /**
   * Convert an instance of USAGEMETHODSCHEMA to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

