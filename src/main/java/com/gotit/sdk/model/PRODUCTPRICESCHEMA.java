/*
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gotit.sdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.gotit.sdk.JSON;

/**
 * PRODUCTPRICESCHEMA
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-05T09:04:05.866297444Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class PRODUCTPRICESCHEMA {
  public static final String SERIALIZED_NAME_PRICE_ID = "priceId";
  @SerializedName(SERIALIZED_NAME_PRICE_ID)
  @javax.annotation.Nullable
  private Integer priceId;

  public static final String SERIALIZED_NAME_PRICE_NM = "priceNm";
  @SerializedName(SERIALIZED_NAME_PRICE_NM)
  @javax.annotation.Nullable
  private String priceNm;

  public static final String SERIALIZED_NAME_PRICE_VALUE = "priceValue";
  @SerializedName(SERIALIZED_NAME_PRICE_VALUE)
  @javax.annotation.Nullable
  private Integer priceValue;

  public PRODUCTPRICESCHEMA() {
  }

  public PRODUCTPRICESCHEMA priceId(@javax.annotation.Nullable Integer priceId) {
    this.priceId = priceId;
    return this;
  }

  /**
   * Product id/size code
   * @return priceId
   */
  @javax.annotation.Nullable
  public Integer getPriceId() {
    return priceId;
  }

  public void setPriceId(@javax.annotation.Nullable Integer priceId) {
    this.priceId = priceId;
  }


  public PRODUCTPRICESCHEMA priceNm(@javax.annotation.Nullable String priceNm) {
    this.priceNm = priceNm;
    return this;
  }

  /**
   * Product name/size name
   * @return priceNm
   */
  @javax.annotation.Nullable
  public String getPriceNm() {
    return priceNm;
  }

  public void setPriceNm(@javax.annotation.Nullable String priceNm) {
    this.priceNm = priceNm;
  }


  public PRODUCTPRICESCHEMA priceValue(@javax.annotation.Nullable Integer priceValue) {
    this.priceValue = priceValue;
    return this;
  }

  /**
   * Product value
   * @return priceValue
   */
  @javax.annotation.Nullable
  public Integer getPriceValue() {
    return priceValue;
  }

  public void setPriceValue(@javax.annotation.Nullable Integer priceValue) {
    this.priceValue = priceValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PRODUCTPRICESCHEMA PRODUCT_PRICE_SCHEMA = (PRODUCTPRICESCHEMA) o;
    return Objects.equals(this.priceId, PRODUCT_PRICE_SCHEMA.priceId) &&
        Objects.equals(this.priceNm, PRODUCT_PRICE_SCHEMA.priceNm) &&
        Objects.equals(this.priceValue, PRODUCT_PRICE_SCHEMA.priceValue);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(priceId, priceNm, priceValue);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PRODUCTPRICESCHEMA {\n");
    sb.append("    priceId: ").append(toIndentedString(priceId)).append("\n");
    sb.append("    priceNm: ").append(toIndentedString(priceNm)).append("\n");
    sb.append("    priceValue: ").append(toIndentedString(priceValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("priceId");
    openapiFields.add("priceNm");
    openapiFields.add("priceValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PRODUCTPRICESCHEMA
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PRODUCTPRICESCHEMA.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PRODUCTPRICESCHEMA is not found in the empty JSON string", PRODUCTPRICESCHEMA.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PRODUCTPRICESCHEMA.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PRODUCTPRICESCHEMA` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("priceNm") != null && !jsonObj.get("priceNm").isJsonNull()) && !jsonObj.get("priceNm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceNm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceNm").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PRODUCTPRICESCHEMA.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PRODUCTPRICESCHEMA' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PRODUCTPRICESCHEMA> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PRODUCTPRICESCHEMA.class));

       return (TypeAdapter<T>) new TypeAdapter<PRODUCTPRICESCHEMA>() {
           @Override
           public void write(JsonWriter out, PRODUCTPRICESCHEMA value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PRODUCTPRICESCHEMA read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PRODUCTPRICESCHEMA given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PRODUCTPRICESCHEMA
   * @throws IOException if the JSON string is invalid with respect to PRODUCTPRICESCHEMA
   */
  public static PRODUCTPRICESCHEMA fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PRODUCTPRICESCHEMA.class);
  }

  /**
   * Convert an instance of PRODUCTPRICESCHEMA to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

