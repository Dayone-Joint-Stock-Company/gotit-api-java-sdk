/*
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gotit.sdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.gotit.sdk.JSON;

/**
 * REQUESTSENDVOUCHERBYZNS
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-05T09:04:05.866297444Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class REQUESTSENDVOUCHERBYZNS {
  public static final String SERIALIZED_NAME_PHONE_NO = "phoneNo";
  @SerializedName(SERIALIZED_NAME_PHONE_NO)
  @javax.annotation.Nonnull
  private String phoneNo;

  public static final String SERIALIZED_NAME_RECEIVER_NM = "receiverNm";
  @SerializedName(SERIALIZED_NAME_RECEIVER_NM)
  @javax.annotation.Nullable
  private String receiverNm;

  public static final String SERIALIZED_NAME_VOUCHER_SERIALS = "voucherSerials";
  @SerializedName(SERIALIZED_NAME_VOUCHER_SERIALS)
  @javax.annotation.Nonnull
  private List<String> voucherSerials = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  @javax.annotation.Nonnull
  private String transactionId;

  public REQUESTSENDVOUCHERBYZNS() {
  }

  public REQUESTSENDVOUCHERBYZNS phoneNo(@javax.annotation.Nonnull String phoneNo) {
    this.phoneNo = phoneNo;
    return this;
  }

  /**
   * Get phoneNo
   * @return phoneNo
   */
  @javax.annotation.Nonnull
  public String getPhoneNo() {
    return phoneNo;
  }

  public void setPhoneNo(@javax.annotation.Nonnull String phoneNo) {
    this.phoneNo = phoneNo;
  }


  public REQUESTSENDVOUCHERBYZNS receiverNm(@javax.annotation.Nullable String receiverNm) {
    this.receiverNm = receiverNm;
    return this;
  }

  /**
   * Get receiverNm
   * @return receiverNm
   */
  @javax.annotation.Nullable
  public String getReceiverNm() {
    return receiverNm;
  }

  public void setReceiverNm(@javax.annotation.Nullable String receiverNm) {
    this.receiverNm = receiverNm;
  }


  public REQUESTSENDVOUCHERBYZNS voucherSerials(@javax.annotation.Nonnull List<String> voucherSerials) {
    this.voucherSerials = voucherSerials;
    return this;
  }

  public REQUESTSENDVOUCHERBYZNS addVoucherSerialsItem(String voucherSerialsItem) {
    if (this.voucherSerials == null) {
      this.voucherSerials = new ArrayList<>();
    }
    this.voucherSerials.add(voucherSerialsItem);
    return this;
  }

  /**
   * Get voucherSerials
   * @return voucherSerials
   */
  @javax.annotation.Nonnull
  public List<String> getVoucherSerials() {
    return voucherSerials;
  }

  public void setVoucherSerials(@javax.annotation.Nonnull List<String> voucherSerials) {
    this.voucherSerials = voucherSerials;
  }


  public REQUESTSENDVOUCHERBYZNS transactionId(@javax.annotation.Nonnull String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * Get transactionId
   * @return transactionId
   */
  @javax.annotation.Nonnull
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(@javax.annotation.Nonnull String transactionId) {
    this.transactionId = transactionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    REQUESTSENDVOUCHERBYZNS REQUEST_SEND_VOUCHER_BY_ZNS = (REQUESTSENDVOUCHERBYZNS) o;
    return Objects.equals(this.phoneNo, REQUEST_SEND_VOUCHER_BY_ZNS.phoneNo) &&
        Objects.equals(this.receiverNm, REQUEST_SEND_VOUCHER_BY_ZNS.receiverNm) &&
        Objects.equals(this.voucherSerials, REQUEST_SEND_VOUCHER_BY_ZNS.voucherSerials) &&
        Objects.equals(this.transactionId, REQUEST_SEND_VOUCHER_BY_ZNS.transactionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(phoneNo, receiverNm, voucherSerials, transactionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class REQUESTSENDVOUCHERBYZNS {\n");
    sb.append("    phoneNo: ").append(toIndentedString(phoneNo)).append("\n");
    sb.append("    receiverNm: ").append(toIndentedString(receiverNm)).append("\n");
    sb.append("    voucherSerials: ").append(toIndentedString(voucherSerials)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("phoneNo");
    openapiFields.add("receiverNm");
    openapiFields.add("voucherSerials");
    openapiFields.add("transactionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("phoneNo");
    openapiRequiredFields.add("voucherSerials");
    openapiRequiredFields.add("transactionId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to REQUESTSENDVOUCHERBYZNS
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!REQUESTSENDVOUCHERBYZNS.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in REQUESTSENDVOUCHERBYZNS is not found in the empty JSON string", REQUESTSENDVOUCHERBYZNS.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!REQUESTSENDVOUCHERBYZNS.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `REQUESTSENDVOUCHERBYZNS` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : REQUESTSENDVOUCHERBYZNS.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("phoneNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNo").toString()));
      }
      if ((jsonObj.get("receiverNm") != null && !jsonObj.get("receiverNm").isJsonNull()) && !jsonObj.get("receiverNm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverNm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverNm").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("voucherSerials") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("voucherSerials").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `voucherSerials` to be an array in the JSON string but got `%s`", jsonObj.get("voucherSerials").toString()));
      }
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!REQUESTSENDVOUCHERBYZNS.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'REQUESTSENDVOUCHERBYZNS' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<REQUESTSENDVOUCHERBYZNS> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(REQUESTSENDVOUCHERBYZNS.class));

       return (TypeAdapter<T>) new TypeAdapter<REQUESTSENDVOUCHERBYZNS>() {
           @Override
           public void write(JsonWriter out, REQUESTSENDVOUCHERBYZNS value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public REQUESTSENDVOUCHERBYZNS read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of REQUESTSENDVOUCHERBYZNS given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of REQUESTSENDVOUCHERBYZNS
   * @throws IOException if the JSON string is invalid with respect to REQUESTSENDVOUCHERBYZNS
   */
  public static REQUESTSENDVOUCHERBYZNS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, REQUESTSENDVOUCHERBYZNS.class);
  }

  /**
   * Convert an instance of REQUESTSENDVOUCHERBYZNS to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

