/*
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gotit.sdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.gotit.sdk.model.VOUCHERESCHEMA;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.gotit.sdk.JSON;

/**
 * VOUCHERE
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-05T09:04:05.866297444Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class VOUCHERE {
  public static final String SERIALIZED_NAME_TRANSACTION_REF_ID = "transactionRefId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_REF_ID)
  @javax.annotation.Nullable
  private String transactionRefId;

  public static final String SERIALIZED_NAME_VOUCHERS = "vouchers";
  @SerializedName(SERIALIZED_NAME_VOUCHERS)
  @javax.annotation.Nullable
  private List<VOUCHERESCHEMA> vouchers = new ArrayList<>();

  public VOUCHERE() {
  }

  public VOUCHERE transactionRefId(@javax.annotation.Nullable String transactionRefId) {
    this.transactionRefId = transactionRefId;
    return this;
  }

  /**
   * TransactionRefId receive from client request
   * @return transactionRefId
   */
  @javax.annotation.Nullable
  public String getTransactionRefId() {
    return transactionRefId;
  }

  public void setTransactionRefId(@javax.annotation.Nullable String transactionRefId) {
    this.transactionRefId = transactionRefId;
  }


  public VOUCHERE vouchers(@javax.annotation.Nullable List<VOUCHERESCHEMA> vouchers) {
    this.vouchers = vouchers;
    return this;
  }

  public VOUCHERE addVouchersItem(VOUCHERESCHEMA vouchersItem) {
    if (this.vouchers == null) {
      this.vouchers = new ArrayList<>();
    }
    this.vouchers.add(vouchersItem);
    return this;
  }

  /**
   * Get vouchers
   * @return vouchers
   */
  @javax.annotation.Nullable
  public List<VOUCHERESCHEMA> getVouchers() {
    return vouchers;
  }

  public void setVouchers(@javax.annotation.Nullable List<VOUCHERESCHEMA> vouchers) {
    this.vouchers = vouchers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VOUCHERE VOUCHER_E = (VOUCHERE) o;
    return Objects.equals(this.transactionRefId, VOUCHER_E.transactionRefId) &&
        Objects.equals(this.vouchers, VOUCHER_E.vouchers);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionRefId, vouchers);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VOUCHERE {\n");
    sb.append("    transactionRefId: ").append(toIndentedString(transactionRefId)).append("\n");
    sb.append("    vouchers: ").append(toIndentedString(vouchers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionRefId");
    openapiFields.add("vouchers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VOUCHERE
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VOUCHERE.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VOUCHERE is not found in the empty JSON string", VOUCHERE.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VOUCHERE.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VOUCHERE` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("transactionRefId") != null && !jsonObj.get("transactionRefId").isJsonNull()) && !jsonObj.get("transactionRefId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionRefId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionRefId").toString()));
      }
      if (jsonObj.get("vouchers") != null && !jsonObj.get("vouchers").isJsonNull()) {
        JsonArray jsonArrayvouchers = jsonObj.getAsJsonArray("vouchers");
        if (jsonArrayvouchers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vouchers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vouchers` to be an array in the JSON string but got `%s`", jsonObj.get("vouchers").toString()));
          }

          // validate the optional field `vouchers` (array)
          for (int i = 0; i < jsonArrayvouchers.size(); i++) {
            VOUCHERESCHEMA.validateJsonElement(jsonArrayvouchers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VOUCHERE.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VOUCHERE' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VOUCHERE> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VOUCHERE.class));

       return (TypeAdapter<T>) new TypeAdapter<VOUCHERE>() {
           @Override
           public void write(JsonWriter out, VOUCHERE value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VOUCHERE read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VOUCHERE given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VOUCHERE
   * @throws IOException if the JSON string is invalid with respect to VOUCHERE
   */
  public static VOUCHERE fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VOUCHERE.class);
  }

  /**
   * Convert an instance of VOUCHERE to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

