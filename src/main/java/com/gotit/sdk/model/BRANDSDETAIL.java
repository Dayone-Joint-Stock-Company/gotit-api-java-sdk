/*
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gotit.sdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.gotit.sdk.model.STORESSCHEMA;
import com.gotit.sdk.model.USAGEMETHODSCHEMA;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.gotit.sdk.JSON;

/**
 * BRANDSDETAIL
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-05T09:04:05.866297444Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class BRANDSDETAIL {
  public static final String SERIALIZED_NAME_BRAND_ID = "brandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  @javax.annotation.Nullable
  private Integer brandId;

  public static final String SERIALIZED_NAME_BRAND_NM = "brandNm";
  @SerializedName(SERIALIZED_NAME_BRAND_NM)
  @javax.annotation.Nullable
  private String brandNm;

  public static final String SERIALIZED_NAME_BRAND_LOGO = "brandLogo";
  @SerializedName(SERIALIZED_NAME_BRAND_LOGO)
  @javax.annotation.Nullable
  private String brandLogo;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  @javax.annotation.Nullable
  private String slug;

  public static final String SERIALIZED_NAME_SHORT_DESC = "shortDesc";
  @SerializedName(SERIALIZED_NAME_SHORT_DESC)
  @javax.annotation.Nullable
  private Object shortDesc = null;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_CATEGORY_I_D = "categoryID";
  @SerializedName(SERIALIZED_NAME_CATEGORY_I_D)
  @javax.annotation.Nullable
  private List<Object> categoryID;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  @javax.annotation.Nullable
  private Integer order;

  public static final String SERIALIZED_NAME_SERVICE_GUIDE = "serviceGuide";
  @SerializedName(SERIALIZED_NAME_SERVICE_GUIDE)
  @javax.annotation.Nullable
  private Object serviceGuide = null;

  public static final String SERIALIZED_NAME_STORES = "stores";
  @SerializedName(SERIALIZED_NAME_STORES)
  @javax.annotation.Nullable
  private List<STORESSCHEMA> stores = new ArrayList<>();

  public static final String SERIALIZED_NAME_USAGE_METHODS = "usageMethods";
  @SerializedName(SERIALIZED_NAME_USAGE_METHODS)
  @javax.annotation.Nullable
  private List<USAGEMETHODSCHEMA> usageMethods = new ArrayList<>();

  public BRANDSDETAIL() {
  }

  public BRANDSDETAIL brandId(@javax.annotation.Nullable Integer brandId) {
    this.brandId = brandId;
    return this;
  }

  /**
   * Brand id
   * @return brandId
   */
  @javax.annotation.Nullable
  public Integer getBrandId() {
    return brandId;
  }

  public void setBrandId(@javax.annotation.Nullable Integer brandId) {
    this.brandId = brandId;
  }


  public BRANDSDETAIL brandNm(@javax.annotation.Nullable String brandNm) {
    this.brandNm = brandNm;
    return this;
  }

  /**
   * Brand name
   * @return brandNm
   */
  @javax.annotation.Nullable
  public String getBrandNm() {
    return brandNm;
  }

  public void setBrandNm(@javax.annotation.Nullable String brandNm) {
    this.brandNm = brandNm;
  }


  public BRANDSDETAIL brandLogo(@javax.annotation.Nullable String brandLogo) {
    this.brandLogo = brandLogo;
    return this;
  }

  /**
   * Link to brand logo image
   * @return brandLogo
   */
  @javax.annotation.Nullable
  public String getBrandLogo() {
    return brandLogo;
  }

  public void setBrandLogo(@javax.annotation.Nullable String brandLogo) {
    this.brandLogo = brandLogo;
  }


  public BRANDSDETAIL slug(@javax.annotation.Nullable String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Brand name used for URL
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(@javax.annotation.Nullable String slug) {
    this.slug = slug;
  }


  public BRANDSDETAIL shortDesc(@javax.annotation.Nullable Object shortDesc) {
    this.shortDesc = shortDesc;
    return this;
  }

  /**
   * Brand short description
   * @return shortDesc
   */
  @javax.annotation.Nullable
  public Object getShortDesc() {
    return shortDesc;
  }

  public void setShortDesc(@javax.annotation.Nullable Object shortDesc) {
    this.shortDesc = shortDesc;
  }


  public BRANDSDETAIL description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public BRANDSDETAIL categoryID(@javax.annotation.Nullable List<Object> categoryID) {
    this.categoryID = categoryID;
    return this;
  }

  public BRANDSDETAIL addCategoryIDItem(Object categoryIDItem) {
    if (this.categoryID == null) {
      this.categoryID = new ArrayList<>();
    }
    this.categoryID.add(categoryIDItem);
    return this;
  }

  /**
   * Array containing a list of Categories codes to which the Brand belongs
   * @return categoryID
   */
  @javax.annotation.Nullable
  public List<Object> getCategoryID() {
    return categoryID;
  }

  public void setCategoryID(@javax.annotation.Nullable List<Object> categoryID) {
    this.categoryID = categoryID;
  }


  public BRANDSDETAIL order(@javax.annotation.Nullable Integer order) {
    this.order = order;
    return this;
  }

  /**
   * The serial number displays the brand
   * @return order
   */
  @javax.annotation.Nullable
  public Integer getOrder() {
    return order;
  }

  public void setOrder(@javax.annotation.Nullable Integer order) {
    this.order = order;
  }


  public BRANDSDETAIL serviceGuide(@javax.annotation.Nullable Object serviceGuide) {
    this.serviceGuide = serviceGuide;
    return this;
  }

  /**
   * Describe the brand&#39;s terms of reference (T&amp;C). HTML format
   * @return serviceGuide
   */
  @javax.annotation.Nullable
  public Object getServiceGuide() {
    return serviceGuide;
  }

  public void setServiceGuide(@javax.annotation.Nullable Object serviceGuide) {
    this.serviceGuide = serviceGuide;
  }


  public BRANDSDETAIL stores(@javax.annotation.Nullable List<STORESSCHEMA> stores) {
    this.stores = stores;
    return this;
  }

  public BRANDSDETAIL addStoresItem(STORESSCHEMA storesItem) {
    if (this.stores == null) {
      this.stores = new ArrayList<>();
    }
    this.stores.add(storesItem);
    return this;
  }

  /**
   * Get stores
   * @return stores
   */
  @javax.annotation.Nullable
  public List<STORESSCHEMA> getStores() {
    return stores;
  }

  public void setStores(@javax.annotation.Nullable List<STORESSCHEMA> stores) {
    this.stores = stores;
  }


  public BRANDSDETAIL usageMethods(@javax.annotation.Nullable List<USAGEMETHODSCHEMA> usageMethods) {
    this.usageMethods = usageMethods;
    return this;
  }

  public BRANDSDETAIL addUsageMethodsItem(USAGEMETHODSCHEMA usageMethodsItem) {
    if (this.usageMethods == null) {
      this.usageMethods = new ArrayList<>();
    }
    this.usageMethods.add(usageMethodsItem);
    return this;
  }

  /**
   * Information on the brand&#39;s applicable channels
   * @return usageMethods
   */
  @javax.annotation.Nullable
  public List<USAGEMETHODSCHEMA> getUsageMethods() {
    return usageMethods;
  }

  public void setUsageMethods(@javax.annotation.Nullable List<USAGEMETHODSCHEMA> usageMethods) {
    this.usageMethods = usageMethods;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BRANDSDETAIL BRANDS_DETAIL = (BRANDSDETAIL) o;
    return Objects.equals(this.brandId, BRANDS_DETAIL.brandId) &&
        Objects.equals(this.brandNm, BRANDS_DETAIL.brandNm) &&
        Objects.equals(this.brandLogo, BRANDS_DETAIL.brandLogo) &&
        Objects.equals(this.slug, BRANDS_DETAIL.slug) &&
        Objects.equals(this.shortDesc, BRANDS_DETAIL.shortDesc) &&
        Objects.equals(this.description, BRANDS_DETAIL.description) &&
        Objects.equals(this.categoryID, BRANDS_DETAIL.categoryID) &&
        Objects.equals(this.order, BRANDS_DETAIL.order) &&
        Objects.equals(this.serviceGuide, BRANDS_DETAIL.serviceGuide) &&
        Objects.equals(this.stores, BRANDS_DETAIL.stores) &&
        Objects.equals(this.usageMethods, BRANDS_DETAIL.usageMethods);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(brandId, brandNm, brandLogo, slug, shortDesc, description, categoryID, order, serviceGuide, stores, usageMethods);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BRANDSDETAIL {\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    brandNm: ").append(toIndentedString(brandNm)).append("\n");
    sb.append("    brandLogo: ").append(toIndentedString(brandLogo)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    shortDesc: ").append(toIndentedString(shortDesc)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    categoryID: ").append(toIndentedString(categoryID)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    serviceGuide: ").append(toIndentedString(serviceGuide)).append("\n");
    sb.append("    stores: ").append(toIndentedString(stores)).append("\n");
    sb.append("    usageMethods: ").append(toIndentedString(usageMethods)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brandId");
    openapiFields.add("brandNm");
    openapiFields.add("brandLogo");
    openapiFields.add("slug");
    openapiFields.add("shortDesc");
    openapiFields.add("description");
    openapiFields.add("categoryID");
    openapiFields.add("order");
    openapiFields.add("serviceGuide");
    openapiFields.add("stores");
    openapiFields.add("usageMethods");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BRANDSDETAIL
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BRANDSDETAIL.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BRANDSDETAIL is not found in the empty JSON string", BRANDSDETAIL.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BRANDSDETAIL.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BRANDSDETAIL` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("brandNm") != null && !jsonObj.get("brandNm").isJsonNull()) && !jsonObj.get("brandNm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandNm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandNm").toString()));
      }
      if ((jsonObj.get("brandLogo") != null && !jsonObj.get("brandLogo").isJsonNull()) && !jsonObj.get("brandLogo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandLogo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandLogo").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categoryID") != null && !jsonObj.get("categoryID").isJsonNull() && !jsonObj.get("categoryID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryID` to be an array in the JSON string but got `%s`", jsonObj.get("categoryID").toString()));
      }
      if (jsonObj.get("stores") != null && !jsonObj.get("stores").isJsonNull()) {
        JsonArray jsonArraystores = jsonObj.getAsJsonArray("stores");
        if (jsonArraystores != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stores").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stores` to be an array in the JSON string but got `%s`", jsonObj.get("stores").toString()));
          }

          // validate the optional field `stores` (array)
          for (int i = 0; i < jsonArraystores.size(); i++) {
            STORESSCHEMA.validateJsonElement(jsonArraystores.get(i));
          };
        }
      }
      if (jsonObj.get("usageMethods") != null && !jsonObj.get("usageMethods").isJsonNull()) {
        JsonArray jsonArrayusageMethods = jsonObj.getAsJsonArray("usageMethods");
        if (jsonArrayusageMethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("usageMethods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `usageMethods` to be an array in the JSON string but got `%s`", jsonObj.get("usageMethods").toString()));
          }

          // validate the optional field `usageMethods` (array)
          for (int i = 0; i < jsonArrayusageMethods.size(); i++) {
            USAGEMETHODSCHEMA.validateJsonElement(jsonArrayusageMethods.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BRANDSDETAIL.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BRANDSDETAIL' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BRANDSDETAIL> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BRANDSDETAIL.class));

       return (TypeAdapter<T>) new TypeAdapter<BRANDSDETAIL>() {
           @Override
           public void write(JsonWriter out, BRANDSDETAIL value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BRANDSDETAIL read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BRANDSDETAIL given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BRANDSDETAIL
   * @throws IOException if the JSON string is invalid with respect to BRANDSDETAIL
   */
  public static BRANDSDETAIL fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BRANDSDETAIL.class);
  }

  /**
   * Convert an instance of BRANDSDETAIL to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

