/*
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gotit.sdk.api;

import com.gotit.sdk.ApiCallback;
import com.gotit.sdk.ApiClient;
import com.gotit.sdk.ApiException;
import com.gotit.sdk.ApiResponse;
import com.gotit.sdk.Configuration;
import com.gotit.sdk.Pair;
import com.gotit.sdk.ProgressRequestBody;
import com.gotit.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.gotit.sdk.model.BRANDDETAILRESPONSE;
import com.gotit.sdk.model.BRANDSRESPONSE;
import com.gotit.sdk.model.HTTPBADREQUEST;
import com.gotit.sdk.model.HTTPINTERNALSERVERERROR;
import com.gotit.sdk.model.HTTPNOTFOUND;
import com.gotit.sdk.model.HTTPUNAUTHORIZED;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BrandsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BrandsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BrandsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for brandsByProducts
     * @param xGIAuthorization Authorization (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandsByProductsCall(String xGIAuthorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4.0/brands/brandsByProducts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xGIAuthorization != null) {
            localVarHeaderParams.put("X-GI-Authorization", localVarApiClient.parameterToString(xGIAuthorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call brandsByProductsValidateBeforeCall(String xGIAuthorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xGIAuthorization' is set
        if (xGIAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xGIAuthorization' when calling brandsByProducts(Async)");
        }

        return brandsByProductsCall(xGIAuthorization, _callback);

    }

    /**
     * Get brand by product
     * Returns brand detail data master
     * @param xGIAuthorization Authorization (required)
     * @return BRANDDETAILRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public BRANDDETAILRESPONSE brandsByProducts(String xGIAuthorization) throws ApiException {
        ApiResponse<BRANDDETAILRESPONSE> localVarResp = brandsByProductsWithHttpInfo(xGIAuthorization);
        return localVarResp.getData();
    }

    /**
     * Get brand by product
     * Returns brand detail data master
     * @param xGIAuthorization Authorization (required)
     * @return ApiResponse&lt;BRANDDETAILRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BRANDDETAILRESPONSE> brandsByProductsWithHttpInfo(String xGIAuthorization) throws ApiException {
        okhttp3.Call localVarCall = brandsByProductsValidateBeforeCall(xGIAuthorization, null);
        Type localVarReturnType = new TypeToken<BRANDDETAILRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get brand by product (asynchronously)
     * Returns brand detail data master
     * @param xGIAuthorization Authorization (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandsByProductsAsync(String xGIAuthorization, final ApiCallback<BRANDDETAILRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = brandsByProductsValidateBeforeCall(xGIAuthorization, _callback);
        Type localVarReturnType = new TypeToken<BRANDDETAILRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDetailOfBrand
     * @param xGIAuthorization Authorization (required)
     * @param id Brand Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDetailOfBrandCall(String xGIAuthorization, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4.0/brands/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xGIAuthorization != null) {
            localVarHeaderParams.put("X-GI-Authorization", localVarApiClient.parameterToString(xGIAuthorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailOfBrandValidateBeforeCall(String xGIAuthorization, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xGIAuthorization' is set
        if (xGIAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xGIAuthorization' when calling getDetailOfBrand(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDetailOfBrand(Async)");
        }

        return getDetailOfBrandCall(xGIAuthorization, id, _callback);

    }

    /**
     * Get brand detail
     * Returns brand detail data master
     * @param xGIAuthorization Authorization (required)
     * @param id Brand Id (required)
     * @return BRANDDETAILRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public BRANDDETAILRESPONSE getDetailOfBrand(String xGIAuthorization, Integer id) throws ApiException {
        ApiResponse<BRANDDETAILRESPONSE> localVarResp = getDetailOfBrandWithHttpInfo(xGIAuthorization, id);
        return localVarResp.getData();
    }

    /**
     * Get brand detail
     * Returns brand detail data master
     * @param xGIAuthorization Authorization (required)
     * @param id Brand Id (required)
     * @return ApiResponse&lt;BRANDDETAILRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BRANDDETAILRESPONSE> getDetailOfBrandWithHttpInfo(String xGIAuthorization, Integer id) throws ApiException {
        okhttp3.Call localVarCall = getDetailOfBrandValidateBeforeCall(xGIAuthorization, id, null);
        Type localVarReturnType = new TypeToken<BRANDDETAILRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get brand detail (asynchronously)
     * Returns brand detail data master
     * @param xGIAuthorization Authorization (required)
     * @param id Brand Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDetailOfBrandAsync(String xGIAuthorization, Integer id, final ApiCallback<BRANDDETAILRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailOfBrandValidateBeforeCall(xGIAuthorization, id, _callback);
        Type localVarReturnType = new TypeToken<BRANDDETAILRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getListOfBrands
     * @param xGIAuthorization Authorization (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfBrandsCall(String xGIAuthorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4.0/brands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xGIAuthorization != null) {
            localVarHeaderParams.put("X-GI-Authorization", localVarApiClient.parameterToString(xGIAuthorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListOfBrandsValidateBeforeCall(String xGIAuthorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xGIAuthorization' is set
        if (xGIAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xGIAuthorization' when calling getListOfBrands(Async)");
        }

        return getListOfBrandsCall(xGIAuthorization, _callback);

    }

    /**
     * Get list of brands
     * Retrieve a list of brands
     * @param xGIAuthorization Authorization (required)
     * @return BRANDSRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public BRANDSRESPONSE getListOfBrands(String xGIAuthorization) throws ApiException {
        ApiResponse<BRANDSRESPONSE> localVarResp = getListOfBrandsWithHttpInfo(xGIAuthorization);
        return localVarResp.getData();
    }

    /**
     * Get list of brands
     * Retrieve a list of brands
     * @param xGIAuthorization Authorization (required)
     * @return ApiResponse&lt;BRANDSRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BRANDSRESPONSE> getListOfBrandsWithHttpInfo(String xGIAuthorization) throws ApiException {
        okhttp3.Call localVarCall = getListOfBrandsValidateBeforeCall(xGIAuthorization, null);
        Type localVarReturnType = new TypeToken<BRANDSRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of brands (asynchronously)
     * Retrieve a list of brands
     * @param xGIAuthorization Authorization (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfBrandsAsync(String xGIAuthorization, final ApiCallback<BRANDSRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListOfBrandsValidateBeforeCall(xGIAuthorization, _callback);
        Type localVarReturnType = new TypeToken<BRANDSRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
