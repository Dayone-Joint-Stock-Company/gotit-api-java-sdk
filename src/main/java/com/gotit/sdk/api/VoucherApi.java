/*
 * Sample API
 * Technical document APIs for API Version 4.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: quang.huynh@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gotit.sdk.api;

import com.gotit.sdk.ApiCallback;
import com.gotit.sdk.ApiClient;
import com.gotit.sdk.ApiException;
import com.gotit.sdk.ApiResponse;
import com.gotit.sdk.Configuration;
import com.gotit.sdk.Pair;
import com.gotit.sdk.ProgressRequestBody;
import com.gotit.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.gotit.sdk.model.HTTPBADREQUEST;
import com.gotit.sdk.model.HTTPINTERNALSERVERERROR;
import com.gotit.sdk.model.HTTPNOTFOUND;
import com.gotit.sdk.model.HTTPUNAUTHORIZED;
import com.gotit.sdk.model.REQUESTCREATEVOUCHERLINKE;
import com.gotit.sdk.model.REQUESTCREATEVOUCHERLINKG;
import com.gotit.sdk.model.REQUESTCREATEVOUCHERLINKV;
import com.gotit.sdk.model.VOUCHERERESPONSE;
import com.gotit.sdk.model.VOUCHERGRESPONSE;
import com.gotit.sdk.model.VOUCHERVRESPONSE;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VoucherApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VoucherApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VoucherApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createVoucherLinkE
     * @param xGIAuthorization Authorization (required)
     * @param REQUESTCREATEVOUCHERLINKE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVoucherLinkECall(String xGIAuthorization, REQUESTCREATEVOUCHERLINKE REQUESTCREATEVOUCHERLINKE, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = REQUESTCREATEVOUCHERLINKE;

        // create path and map variables
        String localVarPath = "/api/v4.0/vouchers/e";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xGIAuthorization != null) {
            localVarHeaderParams.put("X-GI-Authorization", localVarApiClient.parameterToString(xGIAuthorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVoucherLinkEValidateBeforeCall(String xGIAuthorization, REQUESTCREATEVOUCHERLINKE REQUESTCREATEVOUCHERLINKE, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xGIAuthorization' is set
        if (xGIAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xGIAuthorization' when calling createVoucherLinkE(Async)");
        }

        return createVoucherLinkECall(xGIAuthorization, REQUESTCREATEVOUCHERLINKE, _callback);

    }

    /**
     * Create voucher link e
     * Create voucher link e
     * @param xGIAuthorization Authorization (required)
     * @param REQUESTCREATEVOUCHERLINKE  (optional)
     * @return VOUCHERERESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public VOUCHERERESPONSE createVoucherLinkE(String xGIAuthorization, REQUESTCREATEVOUCHERLINKE REQUESTCREATEVOUCHERLINKE) throws ApiException {
        ApiResponse<VOUCHERERESPONSE> localVarResp = createVoucherLinkEWithHttpInfo(xGIAuthorization, REQUESTCREATEVOUCHERLINKE);
        return localVarResp.getData();
    }

    /**
     * Create voucher link e
     * Create voucher link e
     * @param xGIAuthorization Authorization (required)
     * @param REQUESTCREATEVOUCHERLINKE  (optional)
     * @return ApiResponse&lt;VOUCHERERESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VOUCHERERESPONSE> createVoucherLinkEWithHttpInfo(String xGIAuthorization, REQUESTCREATEVOUCHERLINKE REQUESTCREATEVOUCHERLINKE) throws ApiException {
        okhttp3.Call localVarCall = createVoucherLinkEValidateBeforeCall(xGIAuthorization, REQUESTCREATEVOUCHERLINKE, null);
        Type localVarReturnType = new TypeToken<VOUCHERERESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create voucher link e (asynchronously)
     * Create voucher link e
     * @param xGIAuthorization Authorization (required)
     * @param REQUESTCREATEVOUCHERLINKE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVoucherLinkEAsync(String xGIAuthorization, REQUESTCREATEVOUCHERLINKE REQUESTCREATEVOUCHERLINKE, final ApiCallback<VOUCHERERESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVoucherLinkEValidateBeforeCall(xGIAuthorization, REQUESTCREATEVOUCHERLINKE, _callback);
        Type localVarReturnType = new TypeToken<VOUCHERERESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVoucherLinkG
     * @param xGIAuthorization Authorization (required)
     * @param REQUESTCREATEVOUCHERLINKG  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVoucherLinkGCall(String xGIAuthorization, REQUESTCREATEVOUCHERLINKG REQUESTCREATEVOUCHERLINKG, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = REQUESTCREATEVOUCHERLINKG;

        // create path and map variables
        String localVarPath = "/api/v4.0/vouchers/g";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xGIAuthorization != null) {
            localVarHeaderParams.put("X-GI-Authorization", localVarApiClient.parameterToString(xGIAuthorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVoucherLinkGValidateBeforeCall(String xGIAuthorization, REQUESTCREATEVOUCHERLINKG REQUESTCREATEVOUCHERLINKG, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xGIAuthorization' is set
        if (xGIAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xGIAuthorization' when calling createVoucherLinkG(Async)");
        }

        return createVoucherLinkGCall(xGIAuthorization, REQUESTCREATEVOUCHERLINKG, _callback);

    }

    /**
     * Create voucher link g
     * Create voucher link g
     * @param xGIAuthorization Authorization (required)
     * @param REQUESTCREATEVOUCHERLINKG  (optional)
     * @return VOUCHERGRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public VOUCHERGRESPONSE createVoucherLinkG(String xGIAuthorization, REQUESTCREATEVOUCHERLINKG REQUESTCREATEVOUCHERLINKG) throws ApiException {
        ApiResponse<VOUCHERGRESPONSE> localVarResp = createVoucherLinkGWithHttpInfo(xGIAuthorization, REQUESTCREATEVOUCHERLINKG);
        return localVarResp.getData();
    }

    /**
     * Create voucher link g
     * Create voucher link g
     * @param xGIAuthorization Authorization (required)
     * @param REQUESTCREATEVOUCHERLINKG  (optional)
     * @return ApiResponse&lt;VOUCHERGRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VOUCHERGRESPONSE> createVoucherLinkGWithHttpInfo(String xGIAuthorization, REQUESTCREATEVOUCHERLINKG REQUESTCREATEVOUCHERLINKG) throws ApiException {
        okhttp3.Call localVarCall = createVoucherLinkGValidateBeforeCall(xGIAuthorization, REQUESTCREATEVOUCHERLINKG, null);
        Type localVarReturnType = new TypeToken<VOUCHERGRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create voucher link g (asynchronously)
     * Create voucher link g
     * @param xGIAuthorization Authorization (required)
     * @param REQUESTCREATEVOUCHERLINKG  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVoucherLinkGAsync(String xGIAuthorization, REQUESTCREATEVOUCHERLINKG REQUESTCREATEVOUCHERLINKG, final ApiCallback<VOUCHERGRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVoucherLinkGValidateBeforeCall(xGIAuthorization, REQUESTCREATEVOUCHERLINKG, _callback);
        Type localVarReturnType = new TypeToken<VOUCHERGRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVoucherLinkV
     * @param xGIAuthorization Authorization (required)
     * @param REQUESTCREATEVOUCHERLINKV  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVoucherLinkVCall(String xGIAuthorization, REQUESTCREATEVOUCHERLINKV REQUESTCREATEVOUCHERLINKV, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = REQUESTCREATEVOUCHERLINKV;

        // create path and map variables
        String localVarPath = "/api/v4.0/vouchers/v";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xGIAuthorization != null) {
            localVarHeaderParams.put("X-GI-Authorization", localVarApiClient.parameterToString(xGIAuthorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVoucherLinkVValidateBeforeCall(String xGIAuthorization, REQUESTCREATEVOUCHERLINKV REQUESTCREATEVOUCHERLINKV, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xGIAuthorization' is set
        if (xGIAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xGIAuthorization' when calling createVoucherLinkV(Async)");
        }

        return createVoucherLinkVCall(xGIAuthorization, REQUESTCREATEVOUCHERLINKV, _callback);

    }

    /**
     * Create voucher link v
     * Create voucher link v
     * @param xGIAuthorization Authorization (required)
     * @param REQUESTCREATEVOUCHERLINKV  (optional)
     * @return VOUCHERVRESPONSE
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public VOUCHERVRESPONSE createVoucherLinkV(String xGIAuthorization, REQUESTCREATEVOUCHERLINKV REQUESTCREATEVOUCHERLINKV) throws ApiException {
        ApiResponse<VOUCHERVRESPONSE> localVarResp = createVoucherLinkVWithHttpInfo(xGIAuthorization, REQUESTCREATEVOUCHERLINKV);
        return localVarResp.getData();
    }

    /**
     * Create voucher link v
     * Create voucher link v
     * @param xGIAuthorization Authorization (required)
     * @param REQUESTCREATEVOUCHERLINKV  (optional)
     * @return ApiResponse&lt;VOUCHERVRESPONSE&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VOUCHERVRESPONSE> createVoucherLinkVWithHttpInfo(String xGIAuthorization, REQUESTCREATEVOUCHERLINKV REQUESTCREATEVOUCHERLINKV) throws ApiException {
        okhttp3.Call localVarCall = createVoucherLinkVValidateBeforeCall(xGIAuthorization, REQUESTCREATEVOUCHERLINKV, null);
        Type localVarReturnType = new TypeToken<VOUCHERVRESPONSE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create voucher link v (asynchronously)
     * Create voucher link v
     * @param xGIAuthorization Authorization (required)
     * @param REQUESTCREATEVOUCHERLINKV  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVoucherLinkVAsync(String xGIAuthorization, REQUESTCREATEVOUCHERLINKV REQUESTCREATEVOUCHERLINKV, final ApiCallback<VOUCHERVRESPONSE> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVoucherLinkVValidateBeforeCall(xGIAuthorization, REQUESTCREATEVOUCHERLINKV, _callback);
        Type localVarReturnType = new TypeToken<VOUCHERVRESPONSE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
